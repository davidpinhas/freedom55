name: Deploy Freedom 55

on:
  push:
    branches:
      - master

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Update setup.py
      run: |
        # Update version setup.py
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)
        NEW_VERSION=$(awk -F. '{$NF = sprintf("%0*d", length($NF), ($NF+1)%9); print}' <<< "$CURRENT_VERSION" | tr ' ' '.')
        sed -i "s/$CURRENT_VERSION/$NEW_VERSION/g" setup.py
        
        # Update version in cli/fd55.py
        CLI_CURRENT_VERSION=$(grep "version=" cli/fd55.py | cut -d "'" -f2)
        CLI_NEW_VERSION=$(awk -F. '{$NF = sprintf("%0*d", length($NF), ($NF+1)%9); print}' <<< "$CLI_CURRENT_VERSION" | tr ' ' '.')
        sed -i "s/$CLI_CURRENT_VERSION/$CLI_NEW_VERSION/g" cli/fd55.py
        
        git config --local user.email "${{ secrets.USERNAME }}"
        git config --local user.name "${{ secrets.USERNAME }}"
        git add setup.py
        echo "New setup.py version: $(cat setup.py | grep 'version=')"
        echo "New CLI version: $(cat cli/fd55.py | grep 'version=')"
        git commit -m "Update version to $NEW_VERSION"
        git push origin

  build-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)
        wget -qO - https://releases.jfrog.io/artifactory/jfrog-gpg-public/jfrog_public_gpg.key | sudo apt-key add -
        echo "deb https://releases.jfrog.io/artifactory/jfrog-debs xenial contrib" | sudo tee -a /etc/apt/sources.list && sudo apt update
        sudo apt install -y jfrog-cli-v2-jf && jf intro
        jf c add artifactory --url ${{ secrets.ARTIFACTORY_URL }} --user ${{ secrets.USERNAME }} --password ${{ secrets.PASSWORD}} --interactive=false
        jf pip-config --server-id-resolve=artifactory --repo-resolve=pypi
        jf pip install -r requirements.txt --build-name fd55-build --build-number ${CURRENT_VERSION} --no-cache-dir --force-reinstall
        pip3 install -r requirements.txt
    - name: Build package
      run: python3 -m build
    - name: Deploy package to Artifactory
      run: |
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)
        jf rt u --url ${{ secrets.JF_URL }} --password ${{ secrets.PASSWORD}} --user ${{ secrets.USERNAME }} dist/fd55-${CURRENT_VERSION}-py3-none-any.whl ${{ secrets.REPO }}/fd55/${CURRENT_VERSION}/fd55-${CURRENT_VERSION}-py3-none-any.whl --build-name fd55-build --build-number ${CURRENT_VERSION}
        jf rt u --url ${{ secrets.JF_URL }} --password ${{ secrets.PASSWORD}} --user ${{ secrets.USERNAME }} dist/fd55-${CURRENT_VERSION}.tar.gz ${{ secrets.REPO }}/fd55/${CURRENT_VERSION}/fd55-${CURRENT_VERSION}.tar.gz --build-name fd55-build --build-number ${CURRENT_VERSION}
    - name: Publish build info
      run: |
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)
        jf rt bag fd55-build ${CURRENT_VERSION}
        jf rt bp fd55-build ${CURRENT_VERSION}
    - name: Scan published build
      run: |
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)
        jf bs fd55-build ${CURRENT_VERSION} --server-id=artifactory
    needs: [update-version]
