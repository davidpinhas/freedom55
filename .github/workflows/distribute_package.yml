name: Deploy Freedom 55

on:
  push:
    branches:
      - master

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Python lint
      uses: peter-evans/autopep8@v1
      with:
        args: --in-place --aggressive --aggressive --recursive .
    - name: Update setup.py
      run: |
        # Update version setup.py
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)

        # Split the version number into its components
        MAJOR=$(echo $CURRENT_VERSION | cut -d '.' -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d '.' -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d '.' -f3)

        # Increment the patch number
        PATCH=$((PATCH+1))

        # If the patch number is 10 or greater, reset it to 0 and increment the minor number
        if [ $PATCH -ge 10 ]; then
        PATCH=0
        MINOR=$((MINOR+1))
        fi

        # If the minor number is 10 or greater, reset it to 0 and increment the major number
        if [ $MINOR -ge 10 ]; then
        MINOR=0
        MAJOR=$((MAJOR+1))
        fi

        # Build the new version number
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        
        # Update versions
        sed -i "s/$CURRENT_VERSION/$NEW_VERSION/g" setup.py
        sed -i "s/$CURRENT_VERSION/$NEW_VERSION/g" fd55/cli/fd55.py
        
        git config --local user.email "${{ secrets.USERNAME }}"
        git config --local user.name "${{ secrets.USERNAME }}"
        git add .
        echo "New setup.py version: $(cat setup.py | grep 'version=')"
        echo "New CLI version: $(cat fd55/cli/fd55.py | grep 'version=')"
        git commit -m "Update version to $NEW_VERSION"
        git push origin
    needs: []

  build-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Build package
      run: python -m build
    - name: Publish package to Azure Artifacts
      run: |
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)
        python -m pip install twine
        twine upload --repository-url ${{ secrets.PYPI_URL }} --username ${{ secrets.USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} dist/*
    needs: [update-version]