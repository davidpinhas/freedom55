name: Deploy Freedom 55

on:
  push:
    branches:
      - master

jobs:
  cli-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: 3.11
      - name: Python Unittest
        run: |
          sudo apt update
          sudo apt install age -y
          echo "${{ secrets.OCI_TEST_KEY}}" > oci.key
          pip install --upgrade pip
          python3.11 -m venv freedom55-venv
          source freedom55-venv/bin/activate
          pip3 install -r requirements.txt
          bash tests/run_tests.sh \
            --oci-user "${{ secrets.OCI_USER}}" \
            --oci-fingerprint "${{ secrets.OCI_FINGERPRINT}}" \
            --oci-tenancy "${{ secrets.OCI_TENANCY}}" \
            --oci-region "${{ secrets.OCI_REGION}}" \
            --oci-key-file "oci.key" \
            --oci-vault "${{ secrets.OCI_VAULT}}" \
            --argocd-url "${{ secrets.ARGO_URL}}" \
            --argocd-token "${{ secrets.ARGO_TOKEN}}" \
            --cloudflare-email "${{ secrets.CLOUDFLARE_EMAIL}}" \
            --cloudflare-api-key "${{ secrets.CLOUDFLARE_API_KEY}}" \
            --cloudflare-domain "${{ secrets.CLOUDFLARE_DOMAIN}}"
      - name: Verify tests
        if: env.TEST_RESULTS != 'true'
        run: exit 1

  update-version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Python lint
      uses: peter-evans/autopep8@v1
      with:
        args: --in-place --aggressive --aggressive --recursive .
    - name: Update setup.py
      run: |
        # Update version setup.py
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)

        # Split the version number into its components
        MAJOR=$(echo $CURRENT_VERSION | cut -d '.' -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d '.' -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d '.' -f3)

        # Increment the patch number
        PATCH=$((PATCH+1))

        # If the patch number is 10 or greater, reset it to 0 and increment the minor number
        if [ $PATCH -ge 10 ]; then
        PATCH=0
        MINOR=$((MINOR+1))
        fi

        # If the minor number is 10 or greater, reset it to 0 and increment the major number
        if [ $MINOR -ge 10 ]; then
        MINOR=0
        MAJOR=$((MAJOR+1))
        fi

        # Build the new version number
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        
        # Update versions
        sed -i "s/$CURRENT_VERSION/$NEW_VERSION/g" setup.py
        sed -i "s/$CURRENT_VERSION/$NEW_VERSION/g" cli/fd55.py
        
        git config --local user.email "${{ secrets.USERNAME }}"
        git config --local user.name "${{ secrets.USERNAME }}"
        git add .
        echo "New setup.py version: $(cat setup.py | grep 'version=')"
        echo "New CLI version: $(cat cli/fd55.py | grep 'version=')"
        git commit -m "Update version to $NEW_VERSION"
        git push origin
    needs: [cli-tests]

  build-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)
        wget -qO - https://releases.jfrog.io/artifactory/jfrog-gpg-public/jfrog_public_gpg.key | sudo apt-key add -
        echo "deb https://releases.jfrog.io/artifactory/jfrog-debs xenial contrib" | sudo tee -a /etc/apt/sources.list && sudo apt update
        sudo apt install -y jfrog-cli-v2-jf && jf intro
        jf c add artifactory --url ${{ secrets.ARTIFACTORY_URL }} --user ${{ secrets.USERNAME }} --password ${{ secrets.PASSWORD}} --interactive=false
        jf pip-config --server-id-resolve=artifactory --repo-resolve=pypi
        jf pip install -r requirements.txt --build-name fd55-build --build-number ${CURRENT_VERSION} --no-cache-dir --force-reinstall
        pip3 install -r requirements.txt
    - name: Build package
      run: python3 -m build
    - name: Deploy package to Artifactory
      run: |
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)
        jf rt u --url ${{ secrets.JF_URL }} --password ${{ secrets.PASSWORD}} --user ${{ secrets.USERNAME }} dist/fd55-${CURRENT_VERSION}-py3-none-any.whl ${{ secrets.REPO }}/fd55/${CURRENT_VERSION}/fd55-${CURRENT_VERSION}-py3-none-any.whl --build-name fd55-build --build-number ${CURRENT_VERSION}
        jf rt u --url ${{ secrets.JF_URL }} --password ${{ secrets.PASSWORD}} --user ${{ secrets.USERNAME }} dist/fd55-${CURRENT_VERSION}.tar.gz ${{ secrets.REPO }}/fd55/${CURRENT_VERSION}/fd55-${CURRENT_VERSION}.tar.gz --build-name fd55-build --build-number ${CURRENT_VERSION}
    - name: Publish build info
      run: |
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)
        jf rt bag fd55-build ${CURRENT_VERSION}
        jf rt bp fd55-build ${CURRENT_VERSION}
    - name: Scan published build
      run: |
        CURRENT_VERSION=$(grep "version=" setup.py | cut -d '"' -f2)
        jf bs fd55-build ${CURRENT_VERSION} --server-id=artifactory
    needs: [update-version]
